name: ü§ñ AI Project Monitor Enhanced

on:
  schedule:
    - cron: "0 8 * * *" # Daily at 11:00 Kyiv time (UTC+3)
  workflow_dispatch:
    inputs:
      report_type:
        description: 'Type of report to generate'
        required: false
        default: 'full'
        type: choice
        options:
        - full
        - security
        - business
        - technical

jobs:
  generate-report:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
      issues: read
      actions: read

    steps:
      - name: üîç Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 30 # Last 30 days for trend analysis
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üìÖ Setup Environment
        run: |
          echo "REPORT_DATE=$(date +%F)" >> $GITHUB_ENV
          echo "REPORT_TIME=$(date +%H:%M)" >> $GITHUB_ENV
          mkdir -p attribution/docs/daily_reports attribution/docs/ai-feedback/recommendations

      - name: üìä Collect Git Development Metrics
        run: |
          REPORT_DIR="attribution/docs/daily_reports"
          REPORT_FILE="${REPORT_DIR}/${REPORT_DATE}_report.md"

          echo "# üìä UnMoGrowP Daily Development Report" > "$REPORT_FILE"
          echo "**Date:** ${REPORT_DATE} ${REPORT_TIME} (Kyiv)" >> "$REPORT_FILE"
          echo "**Generated by:** AI Monitor GitHub Action" >> "$REPORT_FILE"
          echo "" >> "$REPORT_FILE"

          echo "## üìà Git Activity (Last 24 Hours)" >> "$REPORT_FILE"
          echo "" >> "$REPORT_FILE"

          echo "### Recent Commits:" >> "$REPORT_FILE"
          git log --since="24 hours ago" --oneline --no-merges >> "$REPORT_FILE" || echo "No commits in last 24 hours" >> "$REPORT_FILE"
          echo "" >> "$REPORT_FILE"

          echo "### Active Contributors:" >> "$REPORT_FILE"
          git log --since="24 hours ago" --pretty=format:"%an" | sort | uniq -c | sort -nr >> "$REPORT_FILE" || echo "No contributors" >> "$REPORT_FILE"
          echo "" >> "$REPORT_FILE"

      - name: üíº Collect Business Context
        run: |
          REPORT_DIR="attribution/docs/daily_reports"
          BUSINESS_FILE="${REPORT_DIR}/${REPORT_DATE}_business.md"

          echo "# üíº Business Context Report - ${REPORT_DATE}" > "$BUSINESS_FILE"
          echo "" >> "$BUSINESS_FILE"

          echo "## üéØ Week 4 Enterprise Sprint Status" >> "$BUSINESS_FILE"
          echo "- **Current Phase:** Week 4 Enterprise Sprint" >> "$BUSINESS_FILE"
          echo "- **Sprint Goal:** 25-28 customers, \$125K-140K MRR" >> "$BUSINESS_FILE"
          echo "- **Current Status:** 20 customers, \$103.4K MRR" >> "$BUSINESS_FILE"
          echo "" >> "$BUSINESS_FILE"

      - name: üîí Security Analysis
        run: |
          REPORT_DIR="attribution/docs/daily_reports"
          SECURITY_FILE="${REPORT_DIR}/${REPORT_DATE}_security.md"

          echo "# üîí Security Status Report - ${REPORT_DATE}" > "$SECURITY_FILE"
          echo "" >> "$SECURITY_FILE"

          echo "## Security-Related Changes:" >> "$SECURITY_FILE"
          git log --since="24 hours ago" --oneline --grep="security\|fix\|patch\|vulnerability" >> "$SECURITY_FILE" || echo "No security-related commits" >> "$SECURITY_FILE"
          echo "" >> "$SECURITY_FILE"

      - name: ü§ñ ChatGPT Integration Info
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "‚ö†Ô∏è OPENAI_API_KEY not configured"
            echo "‚ÑπÔ∏è Add OPENAI_API_KEY to repository secrets to enable AI analysis"
          else
            echo "‚úÖ OPENAI_API_KEY configured - ChatGPT integration ready"

            # Create simple placeholder analysis
            AI_FEEDBACK_DIR="attribution/docs/ai-feedback"
            ANALYSIS_FILE="${AI_FEEDBACK_DIR}/recommendations/${REPORT_DATE}_analysis.md"

            echo "# ü§ñ ChatGPT Analysis - ${REPORT_DATE}" > "$ANALYSIS_FILE"
            echo "" >> "$ANALYSIS_FILE"
            echo "**Status:** API Key configured, ready for full integration" >> "$ANALYSIS_FILE"
            echo "**Next Step:** Full ChatGPT analysis implementation" >> "$ANALYSIS_FILE"
            echo "" >> "$ANALYSIS_FILE"
            echo "## Test Integration Successful" >> "$ANALYSIS_FILE"
            echo "- ‚úÖ Repository checkout working" >> "$ANALYSIS_FILE"
            echo "- ‚úÖ Report generation working" >> "$ANALYSIS_FILE"
            echo "- ‚úÖ File structure created" >> "$ANALYSIS_FILE"
            echo "- ‚úÖ OpenAI API key detected" >> "$ANALYSIS_FILE"
          fi

      - name: üìù Create Summary Report
        run: |
          SUMMARY_FILE="attribution/docs/daily_reports/${REPORT_DATE}_SUMMARY.md"

          echo "# üìä Daily Summary - ${REPORT_DATE}" > "$SUMMARY_FILE"
          echo "" >> "$SUMMARY_FILE"
          echo "**Generated:** $(date)" >> "$SUMMARY_FILE"
          echo "**Sprint:** Week 4 Enterprise Sprint" >> "$SUMMARY_FILE"
          echo "" >> "$SUMMARY_FILE"

          echo "## üìà Key Metrics" >> "$SUMMARY_FILE"
          echo "- **Commits Today:** $(git log --since='24 hours ago' --oneline | wc -l)" >> "$SUMMARY_FILE"
          echo "- **Contributors:** $(git log --since='24 hours ago' --pretty=format:'%an' | sort | uniq | wc -l)" >> "$SUMMARY_FILE"
          echo "" >> "$SUMMARY_FILE"

          echo "## üéØ Business Context" >> "$SUMMARY_FILE"
          echo "- **Current:** 20 customers, \$103.4K MRR" >> "$SUMMARY_FILE"
          echo "- **Target:** 25-28 customers, \$125K-140K MRR" >> "$SUMMARY_FILE"
          echo "" >> "$SUMMARY_FILE"

          echo "## üìÅ Generated Files" >> "$SUMMARY_FILE"
          echo "- Development report: \`${REPORT_DATE}_report.md\`" >> "$SUMMARY_FILE"
          echo "- Business context: \`${REPORT_DATE}_business.md\`" >> "$SUMMARY_FILE"
          echo "- Security analysis: \`${REPORT_DATE}_security.md\`" >> "$SUMMARY_FILE"

      - name: üíæ Commit Reports
        run: |
          git config user.name "AI Monitor Bot"
          git config user.email "ai-monitor@unmogrowp.com"
          git add attribution/docs/daily_reports/ attribution/docs/ai-feedback/

          if git diff --staged --quiet; then
            echo "üìù No changes to commit"
          else
            git commit -m "üìä Daily AI Report ${REPORT_DATE}

Generated reports:
- Development activity analysis
- Business context update
- Security status check
- Basic integration test

ü§ñ Generated automatically by AI Monitor
üìÖ ${REPORT_DATE} at ${REPORT_TIME} (Kyiv timezone)"

            echo "‚úÖ Reports committed successfully"
            git push
            echo "üì§ Reports pushed to repository"
          fi

      - name: üìä Workflow Summary
        run: |
          echo "üéâ AI Monitoring test completed successfully!"
          echo ""
          echo "üìä Generated Reports:"
          ls -la attribution/docs/daily_reports/ 2>/dev/null || echo "No reports found"
          echo ""
          echo "ü§ñ AI Integration Status:"
          if [ -f "attribution/docs/ai-feedback/recommendations/${REPORT_DATE}_analysis.md" ]; then
            echo "‚úÖ ChatGPT integration test passed"
          else
            echo "‚ö†Ô∏è ChatGPT integration needs OpenAI API key"
          fi
          echo ""
          echo "‚è∞ Next report: Tomorrow at 11:00 Kyiv time"
          echo "üîß Manual trigger: Use 'Run workflow' button on Actions page"