/**
 * Test script –¥–ª—è UI/UX Agent (JavaScript –≤–µ—Ä—Å–∏—è)
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç API –∫–ª—é—á, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Anthropic API –∏ —Ä–∞–±–æ—Ç—É –∞–≥–µ–Ω—Ç–∞
 */

const Anthropic = require('@anthropic-ai/sdk');
const fs = require('fs');
const path = require('path');

// –ß–∏—Ç–∞–µ–º .env.local –≤—Ä—É—á–Ω—É—é
function loadEnv() {
  const envPath = path.resolve(process.cwd(), '.env.local');
  try {
    const content = fs.readFileSync(envPath, 'utf8');
    const lines = content.split('\n');

    lines.forEach(line => {
      const trimmed = line.trim();
      if (trimmed && !trimmed.startsWith('#')) {
        const [key, ...valueParts] = trimmed.split('=');
        const value = valueParts.join('=');
        if (key && value) {
          process.env[key.trim()] = value.trim();
        }
      }
    });
  } catch (error) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å .env.local:', error.message);
  }
}

loadEnv();

const COLORS = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
};

function log(message, color = 'reset') {
  console.log(`${COLORS[color]}${message}${COLORS.reset}`);
}

function logStep(step, message) {
  log(`\n[${step}/5] ${message}`, 'cyan');
}

function logSuccess(message) {
  log(`‚úì ${message}`, 'green');
}

function logError(message) {
  log(`‚úó ${message}`, 'red');
}

function logWarning(message) {
  log(`‚ö† ${message}`, 'yellow');
}

async function testUIUXAgent() {
  log('\n=== UI/UX Agent Debugger ===\n', 'blue');

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
  logStep(1, '–ü—Ä–æ–≤–µ—Ä–∫–∞ ANTHROPIC_API_KEY');
  const apiKey = process.env.ANTHROPIC_API_KEY;

  if (!apiKey) {
    logError('ANTHROPIC_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env.local');
    logWarning('–î–æ–±–∞–≤—å—Ç–µ ANTHROPIC_API_KEY=sk-ant-... –≤ —Ñ–∞–π–ª .env.local');
    process.exit(1);
  }

  if (!apiKey.startsWith('sk-ant-')) {
    logError('ANTHROPIC_API_KEY –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å sk-ant-)');
    process.exit(1);
  }

  logSuccess(`API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: ${apiKey.substring(0, 20)}...${apiKey.substring(apiKey.length - 5)}`);

  // 2. –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Anthropic
  logStep(2, '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Anthropic –∫–ª–∏–µ–Ω—Ç–∞');
  let client;

  try {
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∞
    client = new (Anthropic.default || Anthropic)({ apiKey });
    logSuccess('Anthropic –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω');
  } catch (error) {
    logError(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: ${error.message}`);
    process.exit(1);
  }

  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
  logStep(3, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π');
  const modelsToTest = [
    'claude-sonnet-4-5-20250929',
    'claude-3-5-sonnet-20241022',
    'claude-3-5-sonnet-20240620',
    'claude-3-sonnet-20240229',
  ];

  log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π...');

  for (const model of modelsToTest) {
    try {
      log(`  –ü—Ä–æ–±—É—é –º–æ–¥–µ–ª—å: ${model}`, 'yellow');

      const response = await client.messages.create({
        model,
        max_tokens: 100,
        messages: [{
          role: 'user',
          content: 'Respond with just "OK" if you can read this.',
        }],
      });

      const content = response.content[0];
      if (content.type === 'text') {
        logSuccess(`  ‚úì –ú–æ–¥–µ–ª—å ${model} —Ä–∞–±–æ—Ç–∞–µ—Ç! –û—Ç–≤–µ—Ç: "${content.text.trim()}"`);

        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ä–∞–±–æ—á—É—é –º–æ–¥–µ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
        log(`\n‚úì –ù–∞—à–ª–∏ —Ä–∞–±–æ—á—É—é –º–æ–¥–µ–ª—å!`, 'green');

        // 4. –¢–µ—Å—Ç UI/UX –∞–Ω–∞–ª–∏–∑–∞
        logStep(4, '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UI/UX –∞–Ω–∞–ª–∏–∑–∞');

        const testCode = `export function TestButton({ onClick, children }) {
  return <button onClick={onClick}>{children}</button>;
}`;

        log('–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞ –∞–Ω–∞–ª–∏–∑...');

        const analysisResponse = await client.messages.create({
          model,
          max_tokens: 2048,
          messages: [{
            role: 'user',
            content: `Analyze this React button component for UI/UX issues. Return JSON with:
- score (0-100)
- issues (array of strings)
- recommendations (array of strings)

Component code:
${testCode}

Return only JSON.`,
          }],
        });

        const analysisContent = analysisResponse.content[0];
        if (analysisContent.type === 'text') {
          try {
            // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON
            const jsonMatch = analysisContent.text.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
              const result = JSON.parse(jsonMatch[0]);
              logSuccess('UI/UX –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
              log(`  Score: ${result.score || 'N/A'}`);
              log(`  Issues: ${result.issues?.length || 0} –Ω–∞–π–¥–µ–Ω–æ`);
              log(`  Recommendations: ${result.recommendations?.length || 0} –Ω–∞–π–¥–µ–Ω–æ`);
            } else {
              logWarning('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç, –Ω–æ –Ω–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ');
              log('  ' + analysisContent.text.substring(0, 100) + '...');
            }
          } catch (e) {
            logWarning(`–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON: ${e.message}`);
          }
        }

        // 5. –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        logStep(5, '–ò—Ç–æ–≥–∏');
        logSuccess('–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! ‚úì');
        log(`\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê`, 'green');
        log(`‚îÇ  –†–∞–±–æ—á–∞—è –º–æ–¥–µ–ª—å: ${model}`, 'green');
        log(`‚îÇ  API –∫–ª—é—á: –≤–∞–ª–∏–¥–Ω—ã–π ‚úì`, 'green');
        log(`‚îÇ  –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úì`, 'green');
        log(`‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò`, 'green');

        log('\n‚úì UI/UX Agent –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!', 'green');

        log('\nüìù –û–±–Ω–æ–≤–∏—Ç–µ —Ñ–∞–π–ª lib/agents/ui-ux/agent.ts:', 'cyan');
        log(`   this.model = '${model}';`, 'yellow');

        log('\nüåê –ó–∞—Ç–µ–º –æ—Ç–∫—Ä–æ–π—Ç–µ:', 'cyan');
        log('   http://localhost:3000/ui-ux-demo', 'blue');

        process.exit(0);
      }
    } catch (error) {
      if (error.status === 404) {
        logWarning(`  ‚úó –ú–æ–¥–µ–ª—å ${model} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (404)`);
      } else if (error.status === 401) {
        logError(`  ‚úó –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401) - –Ω–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á`);
        logWarning('\n–ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á –Ω–∞ https://console.anthropic.com/');
        process.exit(1);
      } else if (error.status === 429) {
        logError(`  ‚úó –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (429)`);
        logWarning('–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞');
      } else {
        logError(`  ‚úó –û—à–∏–±–∫–∞: ${error.message}`);
      }
    }
  }

  logError('\n‚úó –ù–∏ –æ–¥–Ω–∞ –∏–∑ –º–æ–¥–µ–ª–µ–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
  log('\nüîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:', 'yellow');
  log('  1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å API –∫–ª—é—á –Ω–∞ https://console.anthropic.com/');
  log('  2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞');
  log('  3. –û–±–Ω–æ–≤–∏—Ç—å SDK: npm update @anthropic-ai/sdk');
  log('  4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');

  process.exit(1);
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testUIUXAgent().catch((error) => {
  logError(`\n‚úó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
  console.error(error);
  process.exit(1);
});
