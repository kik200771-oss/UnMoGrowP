version: '3.8'

# UnMoGrowP Attribution Platform - Production Infrastructure
# Supports 10M+ events/sec processing with high availability

services:
  # =============================================================================
  # DATA LAYER - Storage & Messaging
  # =============================================================================

  # ClickHouse - High-performance analytics database for events
  clickhouse:
    image: clickhouse/clickhouse-server:23.8
    container_name: attribution-clickhouse
    hostname: clickhouse
    ports:
      - "8123:8123"  # HTTP interface
      - "9000:9000"  # Native interface
    environment:
      CLICKHOUSE_DB: attribution
      CLICKHOUSE_USER: attribution
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-attribution_secure_pass}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    volumes:
      - clickhouse_data:/var/lib/clickhouse/
      - ./database/clickhouse-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./infra/clickhouse/config.xml:/etc/clickhouse-server/config.d/custom.xml
      - ./infra/clickhouse/users.xml:/etc/clickhouse-server/users.d/custom.xml
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    networks:
      - attribution-net
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4'

  # PostgreSQL - Transactional database for user data
  postgres:
    image: postgres:15-alpine
    container_name: attribution-postgres
    hostname: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: attribution
      POSTGRES_USER: attribution
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-attribution_secure_pass}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/rbac-migration.sql:/docker-entrypoint-initdb.d/02-rbac.sql
    networks:
      - attribution-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U attribution -d attribution"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'

  # Redis - High-performance caching and real-time data
  redis:
    image: redis:7-alpine
    container_name: attribution-redis
    hostname: redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./infra/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - attribution-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'

  # Kafka - Event streaming platform
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: attribution-zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - attribution-net
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: attribution-kafka
    hostname: kafka
    ports:
      - "9092:9092"
      - "19092:19092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 32
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      # Performance optimization
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 102400
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 102400
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - attribution-net
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'

  # =============================================================================
  # APPLICATION LAYER - Core Services
  # =============================================================================

  # Event Ingestion Service - High-performance event collection
  ingestion-service:
    build:
      context: ./services/ingestion
      dockerfile: Dockerfile
    container_name: attribution-ingestion
    hostname: ingestion
    ports:
      - "8080:8080"
      - "8081:8081"  # Metrics port
    environment:
      PORT: 8080
      METRICS_PORT: 8081
      KAFKA_BROKERS: kafka:29092
      REDIS_URL: redis://redis:6379
      CLICKHOUSE_URL: http://clickhouse:8123
      LOG_LEVEL: info
      WORKER_POOL_SIZE: 50
      BATCH_SIZE: 100
      BATCH_TIMEOUT: 100ms
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    networks:
      - attribution-net
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '2'
      replicas: 3  # Load balancer will distribute

  # Attribution Engine Service - Multi-model attribution calculation
  attribution-service:
    build:
      context: ./services/attribution
      dockerfile: Dockerfile
    container_name: attribution-attribution
    hostname: attribution
    ports:
      - "8082:8082"
      - "8083:8083"  # Metrics port
    environment:
      PORT: 8082
      METRICS_PORT: 8083
      KAFKA_BROKERS: kafka:29092
      REDIS_URL: redis://redis:6379
      CLICKHOUSE_URL: http://clickhouse:8123
      POSTGRES_URL: postgres://attribution:${POSTGRES_PASSWORD:-attribution_secure_pass}@postgres:5432/attribution
      LOG_LEVEL: info
      DEFAULT_ATTRIBUTION_MODEL: last_touch
      ATTRIBUTION_WINDOW_HOURS: 168  # 7 days
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - attribution-net
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'
      replicas: 2

  # =============================================================================
  # MONITORING & OBSERVABILITY
  # =============================================================================

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: attribution-prometheus
    hostname: prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - attribution-net
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'

  # Grafana - Metrics visualization
  grafana:
    image: grafana/grafana:10.1.0
    container_name: attribution-grafana
    hostname: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/provisioning:/etc/grafana/provisioning
      - ./infra/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - attribution-net
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Jaeger - Distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.49
    container_name: attribution-jaeger
    hostname: jaeger
    ports:
      - "16686:16686"  # Web UI
      - "14268:14268"  # HTTP collector
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - attribution-net
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # =============================================================================
  # LOAD BALANCER & API GATEWAY
  # =============================================================================

  # Nginx - Load balancer and reverse proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: attribution-nginx
    hostname: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infra/nginx/conf.d:/etc/nginx/conf.d
      - ./infra/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - ingestion-service
      - attribution-service
    networks:
      - attribution-net
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

# =============================================================================
# NETWORKS & VOLUMES
# =============================================================================

networks:
  attribution-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  clickhouse_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# =============================================================================
# ENVIRONMENT VARIABLES
# =============================================================================

# Create .env file with:
# CLICKHOUSE_PASSWORD=your_secure_clickhouse_password
# POSTGRES_PASSWORD=your_secure_postgres_password
# GRAFANA_PASSWORD=your_secure_grafana_password