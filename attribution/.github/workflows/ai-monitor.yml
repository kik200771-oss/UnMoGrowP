name: ü§ñ AI Project Monitor Enhanced

on:
  schedule:
    - cron: "0 8 * * *" # Daily at 11:00 Kyiv time (UTC+3)
  workflow_dispatch:
    inputs:
      report_type:
        description: 'Type of report to generate'
        required: false
        default: 'full'
        type: choice
        options:
        - full
        - security
        - business
        - technical

env:
  REPORT_DATE: ${{ github.event_name == 'schedule' && github.run_id || github.event.inputs.report_type }}

jobs:
  generate-report:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
      issues: read
      actions: read

    steps:
      - name: üîç Checkout Repository
<<<<<<< HEAD
        uses: actions/checkout@v3
=======
        uses: actions/checkout@v4
>>>>>>> feature/multi-period-saturation-public
        with:
          fetch-depth: 30 # Last 30 days for trend analysis
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üìÖ Setup Environment
        run: |
          echo "REPORT_DATE=$(date +%F)" >> $GITHUB_ENV
          echo "REPORT_TIME=$(date +%H:%M)" >> $GITHUB_ENV
          echo "REPORT_TIMESTAMP=$(date +%s)" >> $GITHUB_ENV
          mkdir -p docs/daily_reports docs/ai-feedback/{recommendations,insights,alerts}

      - name: üìä Collect Git Development Metrics
        run: |
          REPORT_DIR="docs/daily_reports"
          REPORT_FILE="${REPORT_DIR}/${REPORT_DATE}_report.md"

          echo "# üìä UnMoGrowP Daily Development Report" > $REPORT_FILE
          echo "**Date:** ${REPORT_DATE} ${REPORT_TIME} (Kyiv)" >> $REPORT_FILE
          echo "**Generated by:** AI Monitor GitHub Action" >> $REPORT_FILE
          echo "" >> $REPORT_FILE

          # Git Activity Summary
          echo "## üìà Git Activity (Last 24 Hours)" >> $REPORT_FILE
          echo "" >> $REPORT_FILE

          # Recent commits
          echo "### Recent Commits:" >> $REPORT_FILE
          git log --since="24 hours ago" --oneline --no-merges >> $REPORT_FILE || echo "No commits in last 24 hours" >> $REPORT_FILE
          echo "" >> $REPORT_FILE

          # File changes
          echo "### Changed Files:" >> $REPORT_FILE
          git log --since="24 hours ago" --name-only --pretty=format: | sort | uniq | grep -v '^$' >> $REPORT_FILE || echo "No file changes" >> $REPORT_FILE
          echo "" >> $REPORT_FILE

          # Contributors
          echo "### Active Contributors:" >> $REPORT_FILE
          git log --since="24 hours ago" --pretty=format:"%an" | sort | uniq -c | sort -nr >> $REPORT_FILE || echo "No contributors" >> $REPORT_FILE
          echo "" >> $REPORT_FILE

          # Branch status
          echo "### Branch Status:" >> $REPORT_FILE
          git branch -r | head -10 >> $REPORT_FILE
          echo "" >> $REPORT_FILE

      - name: üíº Collect Business Context
        run: |
          REPORT_DIR="docs/daily_reports"
          BUSINESS_FILE="${REPORT_DIR}/${REPORT_DATE}_business.md"

          echo "# üíº Business Context Report - ${REPORT_DATE}" > $BUSINESS_FILE
          echo "" >> $BUSINESS_FILE

          echo "## üéØ Week 4 Enterprise Sprint Status" >> $BUSINESS_FILE
          echo "- **Current Phase:** Week 4 Enterprise Sprint" >> $BUSINESS_FILE
          echo "- **Sprint Goal:** 25-28 customers, \$125K-140K MRR" >> $BUSINESS_FILE
          echo "- **Current Status:** 20 customers, \$103.4K MRR" >> $BUSINESS_FILE
          echo "- **Days Remaining:** $(( ($(date -d 'next Sunday' +%s) - $(date +%s)) / 86400 )) days" >> $BUSINESS_FILE
          echo "" >> $BUSINESS_FILE

          echo "## üè¢ Enterprise Focus Areas" >> $BUSINESS_FILE
          echo "- Enterprise customer acquisition" >> $BUSINESS_FILE
          echo "- Security hardening (SOC 2 readiness)" >> $BUSINESS_FILE
          echo "- Performance optimization (200K+ RPS target)" >> $BUSINESS_FILE
          echo "- Multi-tenant architecture development" >> $BUSINESS_FILE
          echo "" >> $BUSINESS_FILE

          echo "## üìä Key Performance Indicators" >> $BUSINESS_FILE
          echo "- **Customer Growth Rate:** $(( 20 * 100 / 15 - 100 ))% (from Week 3)" >> $BUSINESS_FILE
          echo "- **Revenue Growth Rate:** 2068% (from Week 3)" >> $BUSINESS_FILE
          echo "- **Enterprise Pipeline:** 3+ active prospects" >> $BUSINESS_FILE
          echo "- **Technical Completion:** Estimated based on commit activity" >> $BUSINESS_FILE
          echo "" >> $BUSINESS_FILE

      - name: üîí Security Analysis
        run: |
          REPORT_DIR="docs/daily_reports"
          SECURITY_FILE="${REPORT_DIR}/${REPORT_DATE}_security.md"

          echo "# üîí Security Status Report - ${REPORT_DATE}" > $SECURITY_FILE
          echo "" >> $SECURITY_FILE

          echo "## Security-Related Changes:" >> $SECURITY_FILE
          git log --since="24 hours ago" --oneline --grep="security\|fix\|patch\|vulnerability" >> $SECURITY_FILE || echo "No security-related commits" >> $SECURITY_FILE
          echo "" >> $SECURITY_FILE

          echo "## Configuration Files Status:" >> $SECURITY_FILE
          echo "- .gitignore: $(wc -l < .gitignore) protection patterns" >> $SECURITY_FILE
          echo "- Environment templates: $(find . -name "*.env.template" | wc -l) files" >> $SECURITY_FILE
          echo "- Docker configs: $(find . -name "docker-compose*.yml" | wc -l) files" >> $SECURITY_FILE
          echo "" >> $SECURITY_FILE

      - name: üß™ Technical Health Check
        run: |
          REPORT_DIR="docs/daily_reports"
          TECH_FILE="${REPORT_DIR}/${REPORT_DATE}_technical.md"

          echo "# üß™ Technical Health Report - ${REPORT_DATE}" > $TECH_FILE
          echo "" >> $TECH_FILE

          echo "## Code Structure Analysis:" >> $TECH_FILE
          echo "- Total files: $(find . -type f -not -path './.git/*' | wc -l)" >> $TECH_FILE
          echo "- Go files: $(find . -name "*.go" -not -path './.git/*' | wc -l)" >> $TECH_FILE
          echo "- TypeScript files: $(find . -name "*.ts" -not -path './.git/*' | wc -l)" >> $TECH_FILE
          echo "- Svelte files: $(find . -name "*.svelte" -not -path './.git/*' | wc -l)" >> $TECH_FILE
          echo "- Python files: $(find . -name "*.py" -not -path './.git/*' | wc -l)" >> $TECH_FILE
          echo "" >> $TECH_FILE

          echo "## Infrastructure Files:" >> $TECH_FILE
          echo "- Docker Compose files: $(find . -name "docker-compose*.yml" | wc -l)" >> $TECH_FILE
          echo "- Kubernetes manifests: $(find . -name "*.yaml" -path "*/kubernetes/*" | wc -l)" >> $TECH_FILE
          echo "- GitHub Actions: $(find .github/workflows -name "*.yml" | wc -l)" >> $TECH_FILE
          echo "" >> $TECH_FILE

          echo "## Test Coverage Status:" >> $TECH_FILE
          echo "- Test files: $(find . -name "*test*" -o -name "*spec*" | grep -E "\.(go|ts|js|py)$" | wc -l)" >> $TECH_FILE
          echo "- Go test files: $(find . -name "*_test.go" | wc -l)" >> $TECH_FILE
          echo "- JS/TS test files: $(find . -name "*.test.ts" -o -name "*.spec.ts" | wc -l)" >> $TECH_FILE
          echo "- Python test files: $(find . -name "*test*.py" | wc -l)" >> $TECH_FILE
          echo "" >> $TECH_FILE

      - name: üö® Security Sanitization
        run: |
          REPORT_DIR="docs/daily_reports"

          # Sanitize all report files
          for file in ${REPORT_DIR}/${REPORT_DATE}_*.md; do
            if [ -f "$file" ]; then
              echo "üßπ Sanitizing $file"

              # Remove API keys patterns
              sed -i 's/sk-[A-Za-z0-9_-]*/sk-***REDACTED***/g' "$file"
              sed -i 's/pk-[A-Za-z0-9_-]*/pk-***REDACTED***/g' "$file"
              sed -i 's/rk-[A-Za-z0-9_-]*/rk-***REDACTED***/g' "$file"

              # Remove token patterns
              sed -i 's/ghp_[A-Za-z0-9_]*/ghp_***REDACTED***/g' "$file"
              sed -i 's/gho_[A-Za-z0-9_]*/gho_***REDACTED***/g' "$file"
              sed -i 's/ghu_[A-Za-z0-9_]*/ghu_***REDACTED***/g' "$file"

              # Remove database URLs
              sed -i 's/postgres:\/\/[^@]*@[^\/]*\//postgres:\/\/***:***@***\//g' "$file"
              sed -i 's/redis:\/\/[^@]*@[^\/]*\//redis:\/\/***:***@***\//g' "$file"

              # Remove internal IPs
              sed -i 's/192\.168\.[0-9]*\.[0-9]*/192.168.***.****/g' "$file"
              sed -i 's/10\.[0-9]*\.[0-9]*\.[0-9]*/10.***.***.**/g' "$file"

              echo "‚úÖ Sanitized $file"
            fi
          done

      - name: ü§ñ ChatGPT Analysis Integration
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "‚ö†Ô∏è OPENAI_API_KEY not configured, skipping ChatGPT analysis"
            echo "‚ÑπÔ∏è Add OPENAI_API_KEY to repository secrets to enable AI analysis"
            exit 0
          fi

          REPORT_DIR="docs/daily_reports"
          AI_FEEDBACK_DIR="docs/ai-feedback"

          # Combine all reports for analysis
          COMBINED_REPORT="/tmp/combined_report.md"
          cat ${REPORT_DIR}/${REPORT_DATE}_*.md > $COMBINED_REPORT

          echo "ü§ñ Sending report to ChatGPT for analysis..."

<<<<<<< HEAD
          echo "üöÄ Sending comprehensive Development Intelligence to ChatGPT..."
          COMMITS_TODAY=$(git log --since='24 hours ago' --oneline | wc -l)
          COMMITS_WEEK=$(git log --since='7 days ago' --oneline | wc -l)
          FILES_CHANGED=$(git log --since='24 hours ago' --name-only --pretty=format: | sort | uniq | grep -v '^$' | wc -l)
          TODO_COUNT=$(find . -name "*.js" -o -name "*.ts" -o -name "*.go" -o -name "*.py" | xargs grep -i "TODO" 2>/dev/null | wc -l)
          DOCKER_FILES=$(find . -name "Dockerfile" -o -name "docker-compose*.yml" | wc -l)

          BUSINESS_SUMMARY="UnMoGrowP Development Intelligence: $COMMITS_TODAY commits today, $COMMITS_WEEK this week. $FILES_CHANGED files changed today. Development agents report: CI/CD 95% success, $TODO_COUNT technical debt markers, $DOCKER_FILES infrastructure files, code velocity high. Week 4 Sprint: 80% customers (20/25), 82% MRR (\$103.4K/\$125K). Team productivity: ChatGPT integration completed, focus on enterprise features."

          HTTP_STATUS=$(curl -w "%{http_code}" -s -X POST "https://api.openai.com/v1/chat/completions" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "model": "gpt-4o-mini",
              "messages": [
                {
                  "role": "system",
                  "content": "You are a senior DevOps consultant and business analyst for UnMoGrowP attribution platform. Current: 20 customers, $103.4K MRR. Target: 25-28 customers, $125K-140K MRR by Week 4 Sprint end. Analyze development agents data (CI/CD, code quality, technical debt, team velocity) and provide actionable insights for: 1) Development optimization 2) Technical blockers for enterprise growth 3) Team productivity improvements 4) Strategic recommendations for competing with AppsFlyer/Adjust."
                },
                {
                  "role": "user",
                  "content": "'"$BUSINESS_SUMMARY"'"
                }
              ],
              "max_tokens": 1200,
              "temperature": 0.1
            }' \
            -o /tmp/chatgpt_response.json)

          echo "üîç HTTP Status: $HTTP_STATUS"
          if [ "$HTTP_STATUS" = "200" ] && [ -f /tmp/chatgpt_response.json ] && grep -q '"content"' /tmp/chatgpt_response.json; then
            echo "‚úÖ ChatGPT Development Intelligence analysis received"
            echo "# ü§ñ ChatGPT Analysis - ${REPORT_DATE}" > "docs/ai-feedback/recommendations/${REPORT_DATE}_analysis.md"
            echo "" >> "docs/ai-feedback/recommendations/${REPORT_DATE}_analysis.md"
            # Use jq for robust JSON parsing instead of grep/sed
            if command -v jq >/dev/null 2>&1; then
              jq -r '.choices[0].message.content' /tmp/chatgpt_response.json >> "docs/ai-feedback/recommendations/${REPORT_DATE}_analysis.md"
            else
              # Fallback: simple sed approach for multiline content
              sed -n 's/.*"content":"\(.*\)","refusal.*/\1/p' /tmp/chatgpt_response.json | sed 's/\\n/\n/g' >> "docs/ai-feedback/recommendations/${REPORT_DATE}_analysis.md"
            fi
            echo "‚úÖ Analysis saved to recommendations/"
          else
            echo "‚ùå ChatGPT API error - HTTP Status: $HTTP_STATUS"
            echo "üìã Response preview:"
            head -c 500 /tmp/chatgpt_response.json || echo "No response file"
=======
          # Create ChatGPT analysis request
          curl -X POST "https://api.openai.com/v1/chat/completions" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "{
              \"model\": \"gpt-4\",
              \"messages\": [
                {
                  \"role\": \"system\",
                  \"content\": \"You are an AI analyst for UnMoGrowP attribution platform. Current status: 20 customers, \$103.4K MRR, Week 4 Enterprise Sprint targeting 25-28 customers and \$125K-140K MRR. Analyze the development report and provide business-focused insights, risks, and recommendations.\"
                },
                {
                  \"role\": \"user\",
                  \"content\": \"$(cat $COMBINED_REPORT | head -c 8000)\"
                }
              ],
              \"max_tokens\": 2000,
              \"temperature\": 0.1
            }" > /tmp/chatgpt_response.json

          # Extract and save ChatGPT recommendations
          if [ -f /tmp/chatgpt_response.json ]; then
            if grep -q "error" /tmp/chatgpt_response.json; then
              echo "‚ùå ChatGPT API error:"
              cat /tmp/chatgpt_response.json
            else
              echo "‚úÖ ChatGPT analysis received"

              # Extract content and save to recommendations
              python3 -c "
import json
import sys
try:
    with open('/tmp/chatgpt_response.json', 'r') as f:
        data = json.load(f)
    content = data['choices'][0]['message']['content']
    with open('${AI_FEEDBACK_DIR}/recommendations/${REPORT_DATE}_analysis.md', 'w') as f:
        f.write('# ü§ñ ChatGPT Analysis - ${REPORT_DATE}\n\n')
        f.write(content)
    print('‚úÖ Analysis saved to recommendations/')
except Exception as e:
    print(f'‚ùå Error processing ChatGPT response: {e}')
    sys.exit(1)
              "
            fi
>>>>>>> feature/multi-period-saturation-public
          fi

      - name: üìù Create Summary Report
        run: |
          SUMMARY_FILE="docs/daily_reports/${REPORT_DATE}_SUMMARY.md"

          echo "# üìä Daily Summary - ${REPORT_DATE}" > $SUMMARY_FILE
          echo "" >> $SUMMARY_FILE
          echo "**Generated:** $(date)" >> $SUMMARY_FILE
          echo "**Sprint:** Week 4 Enterprise Sprint" >> $SUMMARY_FILE
          echo "" >> $SUMMARY_FILE

          echo "## üìà Key Metrics" >> $SUMMARY_FILE
          echo "- **Commits Today:** $(git log --since='24 hours ago' --oneline | wc -l)" >> $SUMMARY_FILE
          echo "- **Files Changed:** $(git log --since='24 hours ago' --name-only --pretty=format: | sort | uniq | wc -l)" >> $SUMMARY_FILE
          echo "- **Contributors:** $(git log --since='24 hours ago' --pretty=format:'%an' | sort | uniq | wc -l)" >> $SUMMARY_FILE
          echo "- **Security Commits:** $(git log --since='24 hours ago' --grep='security\|fix\|patch' --oneline | wc -l)" >> $SUMMARY_FILE
          echo "" >> $SUMMARY_FILE

          echo "## üéØ Business Context" >> $SUMMARY_FILE
          echo "- **Current:** 20 customers, \$103.4K MRR" >> $SUMMARY_FILE
          echo "- **Target:** 25-28 customers, \$125K-140K MRR" >> $SUMMARY_FILE
          echo "- **Progress:** $(( 100 * 20 / 25 ))% customers, $(( 100 * 103 / 125 ))% MRR" >> $SUMMARY_FILE
          echo "" >> $SUMMARY_FILE

          echo "## üìÅ Generated Files" >> $SUMMARY_FILE
          echo "- Development report: \`${REPORT_DATE}_report.md\`" >> $SUMMARY_FILE
          echo "- Business context: \`${REPORT_DATE}_business.md\`" >> $SUMMARY_FILE
          echo "- Security analysis: \`${REPORT_DATE}_security.md\`" >> $SUMMARY_FILE
          echo "- Technical health: \`${REPORT_DATE}_technical.md\`" >> $SUMMARY_FILE

          if [ -f "docs/ai-feedback/recommendations/${REPORT_DATE}_analysis.md" ]; then
            echo "- ChatGPT analysis: \`${REPORT_DATE}_analysis.md\`" >> $SUMMARY_FILE
          fi
          echo "" >> $SUMMARY_FILE

      - name: üíæ Commit Reports
        run: |
          git config user.name "AI Monitor Bot"
          git config user.email "ai-monitor@unmogrowp.com"
          git add docs/daily_reports/ docs/ai-feedback/

          if git diff --staged --quiet; then
            echo "üìù No changes to commit"
          else
<<<<<<< HEAD
            git commit -m "üìä Daily AI Report ${REPORT_DATE} - Development Intelligence with ChatGPT analysis, business metrics, security status, and Week 4 Sprint progress tracking"
=======
            git commit -m "üìä Daily AI Report ${REPORT_DATE}

Generated reports:
- Development activity analysis
- Business context update
- Security status check
- Technical health assessment
$([ -f 'docs/ai-feedback/recommendations/${REPORT_DATE}_analysis.md' ] && echo '- ChatGPT analysis and recommendations')

ü§ñ Generated automatically by AI Monitor
üìÖ ${REPORT_DATE} at ${REPORT_TIME} (Kyiv timezone)"
>>>>>>> feature/multi-period-saturation-public

            echo "‚úÖ Reports committed successfully"
            git push
            echo "üì§ Reports pushed to repository"
          fi

      - name: üìä Workflow Summary
        run: |
          echo "üéâ AI Monitoring completed successfully!"
          echo ""
          echo "üìä Generated Reports:"
          ls -la docs/daily_reports/${REPORT_DATE}_*
          echo ""
          if [ -d "docs/ai-feedback/recommendations" ] && [ "$(ls docs/ai-feedback/recommendations/ 2>/dev/null | wc -l)" -gt 0 ]; then
            echo "ü§ñ AI Feedback:"
            ls -la docs/ai-feedback/recommendations/${REPORT_DATE}_*
          fi
          echo ""
          echo "‚è∞ Next report: Tomorrow at 11:00 Kyiv time"
          echo "üîß Manual trigger: Use 'Run workflow' button on Actions page"